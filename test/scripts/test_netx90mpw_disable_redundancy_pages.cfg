# Test script for the snippet disable_redundancy_pages.
# The hardware must be flashed with a bootimage that
# jumps to a breakpoint (0x13c4)
# disables redundancy pages
# jumps to the breakpoint again and
# loads/runs the blinki program.

proc event_target_halted {} {
	echo "*** target halted event"
	global fTargetHalted
	set fTargetHalted true
}

proc resume_wait_for_halt {}  {
	resume
	global fTargetHalted
	set fTargetHalted false
	while {$fTargetHalted==false} {
		poll
		after 100
	}
}

proc mread32 {addr} {
  set value(0) 0
  mem2array value 32 $addr 1
  return $value(0)
}

set ADDR_IFLASH0_RED_CFG0 0xff001c34
set ADDR_IFLASH0_RED_CFG1 0xff001c38

set ADDR_IFLASH1_RED_CFG0 0xff001cb4
set ADDR_IFLASH1_RED_CFG1 0xff001cb8
set ADDR_IFLASH2_RED_CFG0 0xff401434
set ADDR_IFLASH2_RED_CFG1 0xff401438
set ADDR_RESET_CTRL 0xff401260
set ADDR_ACCESS_KEY 0xff4012c0

proc show_regs {{uiCmpPC ""} {uiCmpRedCfg ""} {uiCmpResetStatus ""}} {
	global ADDR_IFLASH0_RED_CFG0 
	global ADDR_IFLASH0_RED_CFG1 
	global ADDR_IFLASH1_RED_CFG0 
	global ADDR_IFLASH1_RED_CFG1 
	global ADDR_IFLASH2_RED_CFG0 
	global ADDR_IFLASH2_RED_CFG1 
	global ADDR_RESET_CTRL 
	global ADDR_ACCESS_KEY

	set uiPC                    [ lindex [ocd_reg pc] 2]
	set uiIflash0RedCfg0        [ mread32 $ADDR_IFLASH0_RED_CFG0 ]
	set uiIflash0RedCfg1        [ mread32 $ADDR_IFLASH0_RED_CFG1 ]
	set uiIflash1RedCfg0        [ mread32 $ADDR_IFLASH1_RED_CFG0 ]
	set uiIflash1RedCfg1        [ mread32 $ADDR_IFLASH1_RED_CFG1 ]
	set uiIflash2RedCfg0        [ mread32 $ADDR_IFLASH2_RED_CFG0 ]
	set uiIflash2RedCfg1        [ mread32 $ADDR_IFLASH2_RED_CFG1 ]
	set uiResetStatus           [ mread32 $ADDR_RESET_CTRL ]
	
	
	if { $uiCmpPC=="" && $uiCmpRedCfg=="" && $uiCmpResetStatus==""} {
		echo "**************************************************"
		puts [ format "PC:                0x%08x" $uiPC]
		puts [ format "ResetCtrl:         0x%08x" $uiResetStatus]
		puts [ format "Iflash0 RedCfg0:   0x%08x" $uiIflash0RedCfg0]
		puts [ format "Iflash0 RedCfg1:   0x%08x" $uiIflash0RedCfg1]
		puts [ format "Iflash1 RedCfg0:   0x%08x" $uiIflash1RedCfg0]
		puts [ format "Iflash1 RedCfg1:   0x%08x" $uiIflash1RedCfg1]
		puts [ format "Iflash2 RedCfg0:   0x%08x" $uiIflash2RedCfg0]
		puts [ format "Iflash2 RedCfg1:   0x%08x" $uiIflash2RedCfg1]
		echo "**************************************************"
	} else {
		echo "**************************************************"
		puts [ format "PC:                0x%08x expected 0x%08x" $uiPC                 $uiCmpPC]
		puts [ format "ResetCtrl:         0x%08x expected 0x%08x" $uiResetStatus        $uiCmpResetStatus]
		puts [ format "Iflash0 RedCfg0:   0x%08x expected 0x%08x" $uiIflash0RedCfg0     $uiCmpRedCfg ]
		puts [ format "Iflash0 RedCfg1:   0x%08x expected 0x%08x" $uiIflash0RedCfg1     $uiCmpRedCfg ]
		puts [ format "Iflash1 RedCfg0:   0x%08x" $uiIflash1RedCfg0]
		puts [ format "Iflash1 RedCfg1:   0x%08x" $uiIflash1RedCfg1]
		puts [ format "Iflash2 RedCfg0:   0x%08x" $uiIflash2RedCfg0]
		puts [ format "Iflash2 RedCfg1:   0x%08x" $uiIflash2RedCfg1]
		
		set OK True
		
		if { $uiCmpPC != $uiPC } {
			echo "unexpected PC value"
			set OK False
		}
	
		if { $uiCmpRedCfg != $uiIflash0RedCfg0 || $uiCmpRedCfg != $uiIflash0RedCfg1 } {
			echo "unexpected RedCfg value"
			set OK False
		}
		
		if { $uiCmpResetStatus != $uiResetStatus } {
			echo "unexpected reset status"
			set OK False
		}
		echo "**************************************************"
		
		if { $OK != "True" } {
			echo "Error"
			shutdown
		}
	}
}


source [find scripts/interface_nxjtag_usb_libftdi.cfg]
adapter_khz 50
transport select jtag

source [find target/hilscher_netx90.cfg]

cortex_m reset_config sysresetreq
init
cortex_m vector_catch reset

# It seems that the debug-halted event is not generated.
#netx90.comm configure -event debug-halted event_target_halted
netx90.comm configure -event halted event_target_halted
#netx90.comm eventlist

# We assume that the hardware has been booted normally and the blinki is running.
# Halt the CPU and show PC, redundancy page settings and reset ctrl value.
halt
echo "*** Interrupted running blinki"
show_regs 

# Set a breakpoint and reset the CPU.
# The PC should be at the start of the reset routine,
# the redundancy pages should be off and the reset cause should be flagged in reset Ctrl.
bp 0x13c4 2 hw
reset
echo "*** After reset: Redundancy pages should be off"
show_regs 0x507c 0x1 0x10
adapter_khz 1000

# Let the boot image run until the first breakpoint.
# The Redundancy pages should be on.
resume_wait_for_halt
echo "*** At first breakpoint in HBoot image, before disabling redundancy pages"
echo "*** Redundancy pages should be on"
show_regs 0x13c4 0 0x10

# Let the boot image run until the second breakpoint.
# The Redundancy pages should be off.
resume_wait_for_halt
echo "*** At second breakpoint in hboot image, after disabling redundancy pages"
echo "*** Redundancy pages should be off"
show_regs 0x13c4 1 0x10

resume 

shutdown
